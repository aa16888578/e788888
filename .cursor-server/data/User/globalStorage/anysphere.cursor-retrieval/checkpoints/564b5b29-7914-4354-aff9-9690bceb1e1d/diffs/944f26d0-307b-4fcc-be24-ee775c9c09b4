{"fsPath":"/home/a0928997578_gmail_com/偉大/functions/src/routes/agent.ts","fileUuid":"944f26d0-307b-4fcc-be24-ee775c9c09b4","fileSizeBytes":7566,"numLines":351,"diffChanges":[{"originalStartLineNumberOneIndexed":1,"originalEndLineNumberExclusiveOneIndexed":1,"modifiedStartLineNumberOneIndexed":1,"modifiedEndLineNumberExclusiveOneIndexed":352,"addedLines":["import { Router } from 'express';","import { agentService } from '../services/agent';","import { authMiddleware } from '../middleware/auth';","import { AgentStatus, CommissionType } from '../types/agent';","","const router = Router();","","/**"," * 代理系統API路由"," */","","// 創建新代理","router.post('/register', authMiddleware, async (req, res) => {","  try {","    const { telegramId, firstName, username, parentAgentId } = req.body;","    ","    if (!telegramId || !firstName) {","      return res.status(400).json({","        success: false,","        message: '缺少必要參數'","      });","    }","","    const agent = await agentService.createAgent({","      userId: req.user!.id,","      telegramId,","      firstName,","      username,","      parentAgentId","    });","","    res.json({","      success: true,","      data: agent,","      message: '代理註冊成功'","    });","  } catch (error) {","    console.error('代理註冊失敗:', error);","    res.status(500).json({","      success: false,","      message: '代理註冊失敗'","    });","  }","});","","// 獲取代理信息","router.get('/profile/:agentId', authMiddleware, async (req, res) => {","  try {","    const { agentId } = req.params;","    const agent = await agentService.getAgent(agentId);","    ","    if (!agent) {","      return res.status(404).json({","        success: false,","        message: '代理不存在'","      });","    }","","    res.json({","      success: true,","      data: agent","    });","  } catch (error) {","    console.error('獲取代理信息失敗:', error);","    res.status(500).json({","      success: false,","      message: '獲取代理信息失敗'","    });","  }","});","","// 根據Telegram ID獲取代理","router.get('/telegram/:telegramId', authMiddleware, async (req, res) => {","  try {","    const { telegramId } = req.params;","    const agent = await agentService.getAgentByTelegramId(parseInt(telegramId));","    ","    if (!agent) {","      return res.status(404).json({","        success: false,","        message: '代理不存在'","      });","    }","","    res.json({","      success: true,","      data: agent","    });","  } catch (error) {","    console.error('獲取代理信息失敗:', error);","    res.status(500).json({","      success: false,","      message: '獲取代理信息失敗'","    });","  }","});","","// 更新代理信息","router.put('/profile/:agentId', authMiddleware, async (req, res) => {","  try {","    const { agentId } = req.params;","    const updates = req.body;","    ","    // 只允許更新特定字段","    const allowedUpdates = ['firstName', 'username'];","    const filteredUpdates: any = {};","    ","    Object.keys(updates).forEach(key => {","      if (allowedUpdates.includes(key)) {","        filteredUpdates[key] = updates[key];","      }","    });","","    await agentService.updateAgent(agentId, filteredUpdates);","","    res.json({","      success: true,","      message: '代理信息更新成功'","    });","  } catch (error) {","    console.error('更新代理信息失敗:', error);","    res.status(500).json({","      success: false,","      message: '更新代理信息失敗'","    });","  }","});","","// 獲取代理團隊","router.get('/team/:agentId', authMiddleware, async (req, res) => {","  try {","    const { agentId } = req.params;","    const team = await agentService.getAgentTeam(agentId);","","    res.json({","      success: true,","      data: team","    });","  } catch (error) {","    console.error('獲取代理團隊失敗:', error);","    res.status(500).json({","      success: false,","      message: '獲取代理團隊失敗'","    });","  }","});","","// 獲取代理績效","router.get('/performance/:agentId', authMiddleware, async (req, res) => {","  try {","    const { agentId } = req.params;","    const { period = 'monthly' } = req.query;","    ","    const now = new Date();","    let startDate: Date;","    let endDate: Date = now;","","    switch (period) {","      case 'daily':","        startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());","        break;","      case 'weekly':","        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);","        break;","      case 'monthly':","        startDate = new Date(now.getFullYear(), now.getMonth(), 1);","        break;","      case 'yearly':","        startDate = new Date(now.getFullYear(), 0, 1);","        break;","      default:","        startDate = new Date(now.getFullYear(), now.getMonth(), 1);","    }","","    const performance = await agentService.getAgentPerformance(","      agentId,","      period as any,","      startDate,","      endDate","    );","","    res.json({","      success: true,","      data: performance","    });","  } catch (error) {","    console.error('獲取代理績效失敗:', error);","    res.status(500).json({","      success: false,","      message: '獲取代理績效失敗'","    });","  }","});","","// 申請提現","router.post('/withdrawal', authMiddleware, async (req, res) => {","  try {","    const { agentId, amount, walletAddress, walletType } = req.body;","    ","    if (!agentId || !amount || !walletAddress || !walletType) {","      return res.status(400).json({","        success: false,","        message: '缺少必要參數'","      });","    }","","    const withdrawal = await agentService.requestWithdrawal(","      agentId,","      amount,","      walletAddress,","      walletType","    );","","    res.json({","      success: true,","      data: withdrawal,","      message: '提現申請提交成功'","    });","  } catch (error) {","    console.error('申請提現失敗:', error);","    res.status(500).json({","      success: false,","      message: error instanceof Error ? error.message : '申請提現失敗'","    });","  }","});","","// 獲取提現記錄","router.get('/withdrawals/:agentId', authMiddleware, async (req, res) => {","  try {","    const { agentId } = req.params;","    const { limit = 20, offset = 0 } = req.query;","","    // TODO: 實現獲取提現記錄的邏輯","    res.json({","      success: true,","      data: [],","      message: '功能開發中'","    });","  } catch (error) {","    console.error('獲取提現記錄失敗:', error);","    res.status(500).json({","      success: false,","      message: '獲取提現記錄失敗'","    });","  }","});","","// 獲取佣金記錄","router.get('/commissions/:agentId', authMiddleware, async (req, res) => {","  try {","    const { agentId } = req.params;","    const { limit = 20, offset = 0, status } = req.query;","","    // TODO: 實現獲取佣金記錄的邏輯","    res.json({","      success: true,","      data: [],","      message: '功能開發中'","    });","  } catch (error) {","    console.error('獲取佣金記錄失敗:', error);","    res.status(500).json({","      success: false,","      message: '獲取佣金記錄失敗'","    });","  }","});","","// 搜索代理","router.get('/search', authMiddleware, async (req, res) => {","  try {","    const { q } = req.query;","    ","    if (!q || typeof q !== 'string') {","      return res.status(400).json({","        success: false,","        message: '請提供搜索關鍵詞'","      });","    }","","    const agents = await agentService.searchAgents(q);","","    res.json({","      success: true,","      data: agents","    });","  } catch (error) {","    console.error('搜索代理失敗:', error);","    res.status(500).json({","      success: false,","      message: '搜索代理失敗'","    });","  }","});","","// 獲取所有代理（管理員功能）","router.get('/all', authMiddleware, async (req, res) => {","  try {","    const { limit = 50, offset = 0 } = req.query;","    ","    // TODO: 檢查管理員權限","    const agents = await agentService.getAllAgents(","      parseInt(limit as string),","      parseInt(offset as string)","    );","","    res.json({","      success: true,","      data: agents","    });","  } catch (error) {","    console.error('獲取所有代理失敗:', error);","    res.status(500).json({","      success: false,","      message: '獲取所有代理失敗'","    });","  }","});","","// 更新代理狀態（管理員功能）","router.put('/status/:agentId', authMiddleware, async (req, res) => {","  try {","    const { agentId } = req.params;","    const { status } = req.body;","    ","    if (!status || !Object.values(AgentStatus).includes(status)) {","      return res.status(400).json({","        success: false,","        message: '無效的狀態值'","      });","    }","","    // TODO: 檢查管理員權限","    await agentService.updateAgent(agentId, { status });","","    res.json({","      success: true,","      message: '代理狀態更新成功'","    });","  } catch (error) {","    console.error('更新代理狀態失敗:', error);","    res.status(500).json({","      success: false,","      message: '更新代理狀態失敗'","    });","  }","});","","export default router;",""],"tokenizedAddedLines":[1000000,1000001,1000002,1000003,1000004,1000005,1000004,1000006,1000007,1000008,1000004,1000009,1000010,1000011,1000012,1000013,1000014,1000015,1000016,1000017,1000018,1000019,1000004,1000020,1000021,1000022,1000023,1000024,1000025,1000026,1000004,1000027,1000028,1000029,1000030,1000026,1000031,1000032,1000033,1000034,1000035,1000026,1000036,1000037,1000004,1000038,1000039,1000011,1000040,1000041,1000013,1000042,1000043,1000016,1000044,1000018,1000019,1000004,1000027,1000028,1000045,1000026,1000031,1000046,1000033,1000034,1000047,1000026,1000036,1000037,1000004,1000048,1000049,1000011,1000050,1000051,1000013,1000042,1000043,1000016,1000044,1000018,1000019,1000004,1000027,1000028,1000045,1000026,1000031,1000046,1000033,1000034,1000047,1000026,1000036,1000037,1000004,1000052,1000053,1000011,1000040,1000054,1000013,1000055,1000056,1000057,1000013,1000058,1000059,1000060,1000061,1000026,1000004,1000062,1000004,1000027,1000028,1000063,1000026,1000031,1000064,1000033,1000034,1000065,1000026,1000036,1000037,1000004,1000066,1000067,1000011,1000040,1000068,1000004,1000027,1000028,1000069,1000026,1000031,1000070,1000033,1000034,1000071,1000026,1000036,1000037,1000004,1000072,1000073,1000011,1000040,1000074,1000013,1000075,1000076,1000077,1000004,1000078,1000079,1000080,1000081,1000082,1000083,1000081,1000084,1000085,1000081,1000086,1000087,1000081,1000088,1000085,1000019,1000004,1000089,1000090,1000091,1000092,1000093,1000094,1000004,1000027,1000028,1000095,1000026,1000031,1000096,1000033,1000034,1000097,1000026,1000036,1000037,1000004,1000098,1000099,1000011,1000100,1000013,1000101,1000015,1000016,1000017,1000018,1000019,1000004,1000102,1000090,1000103,1000104,1000105,1000094,1000004,1000027,1000028,1000106,1000107,1000026,1000031,1000108,1000033,1000034,1000109,1000026,1000036,1000037,1000004,1000110,1000111,1000011,1000040,1000112,1000004,1000113,1000027,1000028,1000114,1000115,1000026,1000031,1000116,1000033,1000034,1000117,1000026,1000036,1000037,1000004,1000118,1000119,1000011,1000040,1000120,1000004,1000121,1000027,1000028,1000114,1000115,1000026,1000031,1000122,1000033,1000034,1000123,1000026,1000036,1000037,1000004,1000124,1000125,1000011,1000126,1000013,1000127,1000015,1000016,1000128,1000018,1000019,1000004,1000129,1000004,1000027,1000028,1000130,1000026,1000031,1000131,1000033,1000034,1000132,1000026,1000036,1000037,1000004,1000133,1000134,1000011,1000135,1000013,1000136,1000137,1000138,1000139,1000094,1000004,1000027,1000028,1000130,1000026,1000031,1000140,1000033,1000034,1000141,1000026,1000036,1000037,1000004,1000142,1000143,1000011,1000040,1000144,1000013,1000145,1000015,1000016,1000146,1000018,1000019,1000004,1000136,1000147,1000004,1000027,1000028,1000148,1000026,1000031,1000149,1000033,1000034,1000150,1000026,1000036,1000037,1000004,1000151,1000004]}],"gitInfo":{"noRepoFound":true},"kind":"KIND_ADDED"}