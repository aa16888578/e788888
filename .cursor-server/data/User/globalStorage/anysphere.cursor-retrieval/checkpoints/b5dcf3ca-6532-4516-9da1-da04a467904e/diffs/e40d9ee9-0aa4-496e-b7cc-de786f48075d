{"fsPath":"/home/a0928997578_gmail_com/偉大/admin/src/lib/database.ts","fileUuid":"e40d9ee9-0aa4-496e-b7cc-de786f48075d","fileSizeBytes":7886,"numLines":293,"diffChanges":[{"originalStartLineNumberOneIndexed":1,"originalEndLineNumberExclusiveOneIndexed":1,"modifiedStartLineNumberOneIndexed":1,"modifiedEndLineNumberExclusiveOneIndexed":294,"addedLines":["import { ","  collection, ","  doc, ","  getDocs, ","  getDoc, ","  addDoc, ","  updateDoc, ","  deleteDoc, ","  query, ","  where, ","  orderBy, ","  limit, ","  startAfter,","  Timestamp,","  QueryConstraint","} from 'firebase/firestore';","import { db } from './firebase';","import { ","  User, ","  Product, ","  Order, ","  Agent, ","  Payment, ","  PaginationParams, ","  PaginatedResponse,","  ProductFilters,","  OrderFilters","} from '@/types';","","// 通用 CRUD 操作","export class DatabaseService<T> {","  constructor(private collectionName: string) {}","","  // 獲取所有文檔","  async getAll(): Promise<T[]> {","    const querySnapshot = await getDocs(collection(db, this.collectionName));","    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as T));","  }","","  // 獲取單個文檔","  async getById(id: string): Promise<T | null> {","    const docRef = doc(db, this.collectionName, id);","    const docSnap = await getDoc(docRef);","    if (docSnap.exists()) {","      return { id: docSnap.id, ...docSnap.data() } as T;","    }","    return null;","  }","","  // 創建文檔","  async create(data: Omit<T, 'id'>): Promise<string> {","    const docRef = await addDoc(collection(db, this.collectionName), {","      ...data,","      createdAt: Timestamp.now(),","      updatedAt: Timestamp.now()","    });","    return docRef.id;","  }","","  // 更新文檔","  async update(id: string, data: Partial<T>): Promise<void> {","    const docRef = doc(db, this.collectionName, id);","    await updateDoc(docRef, {","      ...data,","      updatedAt: Timestamp.now()","    });","  }","","  // 刪除文檔","  async delete(id: string): Promise<void> {","    const docRef = doc(db, this.collectionName, id);","    await deleteDoc(docRef);","  }","","  // 分頁查詢","  async getPaginated(params: PaginationParams, constraints: QueryConstraint[] = []): Promise<PaginatedResponse<T>> {","    const { page, limit: pageLimit, sortBy, sortOrder } = params;","    ","    let q = collection(db, this.collectionName);","    ","    // 添加排序","    if (sortBy) {","      q = query(q, orderBy(sortBy, sortOrder || 'desc'));","    }","    ","    // 添加其他約束","    if (constraints.length > 0) {","      q = query(q, ...constraints);","    }","    ","    // 添加分頁","    const offset = (page - 1) * pageLimit;","    if (offset > 0) {","      // 這裡需要實現游標分頁，暫時使用 limit","      q = query(q, limit(pageLimit));","    } else {","      q = query(q, limit(pageLimit));","    }","    ","    const querySnapshot = await getDocs(q);","    const data = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as T));","    ","    // 獲取總數（這裡需要優化，實際應該單獨查詢）","    const totalSnapshot = await getDocs(collection(db, this.collectionName));","    const total = totalSnapshot.size;","    ","    return {","      data,","      pagination: {","        page,","        limit: pageLimit,","        total,","        totalPages: Math.ceil(total / pageLimit)","      }","    };","  }","}","","// 用戶服務","export class UserService extends DatabaseService<User> {","  constructor() {","    super('users');","  }","","  async getByTelegramId(telegramId: number): Promise<User | null> {","    const q = query(","      collection(db, 'users'),","      where('telegramId', '==', telegramId)","    );","    const querySnapshot = await getDocs(q);","    if (!querySnapshot.empty) {","      const doc = querySnapshot.docs[0];","      return { id: doc.id, ...doc.data() } as User;","    }","    return null;","  }","","  async getActiveUsers(): Promise<User[]> {","    const q = query(","      collection(db, 'users'),","      where('status', '==', 'active')","    );","    const querySnapshot = await getDocs(q);","    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as User));","  }","}","","// 商品服務","export class ProductService extends DatabaseService<Product> {","  constructor() {","    super('products');","  }","","  async getByCategory(category: string): Promise<Product[]> {","    const q = query(","      collection(db, 'products'),","      where('category', '==', category),","      where('status', '==', 'active')","    );","    const querySnapshot = await getDocs(q);","    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Product));","  }","","  async getLowStock(threshold: number = 10): Promise<Product[]> {","    const q = query(","      collection(db, 'products'),","      where('stock', '<=', threshold),","      where('status', '==', 'active')","    );","    const querySnapshot = await getDocs(q);","    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Product));","  }","","  async searchProducts(filters: ProductFilters): Promise<Product[]> {","    let constraints: QueryConstraint[] = [];","    ","    if (filters.category) {","      constraints.push(where('category', '==', filters.category));","    }","    ","    if (filters.status) {","      constraints.push(where('status', '==', filters.status));","    }","    ","    if (filters.priceRange) {","      constraints.push(where('price', '>=', filters.priceRange.min));","      constraints.push(where('price', '<=', filters.priceRange.max));","    }","    ","    constraints.push(where('status', '!=', 'deleted'));","    ","    const q = query(collection(db, 'products'), ...constraints);","    const querySnapshot = await getDocs(q);","    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Product));","  }","}","","// 訂單服務","export class OrderService extends DatabaseService<Order> {","  constructor() {","    super('orders');","  }","","  async getByStatus(status: string): Promise<Order[]> {","    const q = query(","      collection(db, 'orders'),","      where('status', '==', status)","    );","    const querySnapshot = await getDocs(q);","    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Order));","  }","","  async getByUserId(userId: string): Promise<Order[]> {","    const q = query(","      collection(db, 'orders'),","      where('userId', '==', userId),","      orderBy('createdAt', 'desc')","    );","    const querySnapshot = await getDocs(q);","    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Order));","  }","","  async getOrdersByDateRange(startDate: Date, endDate: Date): Promise<Order[]> {","    const q = query(","      collection(db, 'orders'),","      where('createdAt', '>=', Timestamp.fromDate(startDate)),","      where('createdAt', '<=', Timestamp.fromDate(endDate))","    );","    const querySnapshot = await getDocs(q);","    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Order));","  }","}","","// 代理服務","export class AgentService extends DatabaseService<Agent> {","  constructor() {","    super('agents');","  }","","  async getByLevel(level: number): Promise<Agent[]> {","    const q = query(","      collection(db, 'agents'),","      where('agentLevel', '==', level),","      where('status', '==', 'active')","    );","    const querySnapshot = await getDocs(q);","    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Agent));","  }","","  async getTopPerformers(limit: number = 10): Promise<Agent[]> {","    const q = query(","      collection(db, 'agents'),","      where('status', '==', 'active'),","      orderBy('totalSales', 'desc'),","      limit(limit)","    );","    const querySnapshot = await getDocs(q);","    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Agent));","  }","}","","// 支付服務","export class PaymentService extends DatabaseService<Payment> {","  constructor() {","    super('payments');","  }","","  async getByStatus(status: string): Promise<Payment[]> {","    const q = query(","      collection(db, 'payments'),","      where('paymentStatus', '==', status)","    );","    const querySnapshot = await getDocs(q);","    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Payment));","  }","","  async getPendingPayments(): Promise<Payment[]> {","    const q = query(","      collection(db, 'payments'),","      where('paymentStatus', '==', 'pending')","    );","    const querySnapshot = await getDocs(q);","    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Payment));","  }","}","","// 導出服務實例","export const userService = new UserService();","export const productService = new ProductService();","export const orderService = new OrderService();","export const agentService = new AgentService();","export const paymentService = new PaymentService();",""],"tokenizedAddedLines":[1000000,1000001,1000002,1000003,1000004,1000005,1000006,1000007,1000008,1000009,1000010,1000011,1000012,1000013,1000014,1000015,1000016,1000000,1000017,1000018,1000019,1000020,1000021,1000022,1000023,1000024,1000025,1000026,1000027,1000028,1000029,1000030,1000027,1000031,1000032,1000033,1000034,1000035,1000027,1000036,1000037,1000038,1000039,1000040,1000041,1000042,1000043,1000035,1000027,1000044,1000045,1000046,1000047,1000048,1000049,1000050,1000051,1000035,1000027,1000052,1000053,1000038,1000054,1000047,1000049,1000050,1000035,1000027,1000055,1000056,1000038,1000057,1000035,1000027,1000058,1000059,1000060,1000061,1000062,1000061,1000063,1000064,1000065,1000042,1000061,1000066,1000067,1000068,1000042,1000061,1000069,1000070,1000071,1000072,1000073,1000074,1000073,1000042,1000061,1000075,1000076,1000061,1000077,1000078,1000079,1000061,1000080,1000081,1000082,1000083,1000084,1000085,1000086,1000087,1000088,1000035,1000089,1000027,1000090,1000091,1000092,1000093,1000035,1000027,1000094,1000095,1000096,1000097,1000098,1000075,1000099,1000100,1000101,1000042,1000043,1000035,1000027,1000102,1000095,1000096,1000103,1000098,1000075,1000104,1000035,1000089,1000027,1000105,1000106,1000092,1000107,1000035,1000027,1000108,1000095,1000109,1000110,1000103,1000098,1000075,1000111,1000035,1000027,1000112,1000095,1000109,1000113,1000103,1000098,1000075,1000111,1000035,1000027,1000114,1000115,1000061,1000116,1000117,1000042,1000061,1000118,1000119,1000042,1000061,1000120,1000121,1000122,1000042,1000061,1000123,1000061,1000124,1000075,1000111,1000035,1000089,1000027,1000125,1000126,1000092,1000127,1000035,1000027,1000128,1000095,1000129,1000130,1000098,1000075,1000131,1000035,1000027,1000132,1000095,1000129,1000133,1000134,1000098,1000075,1000131,1000035,1000027,1000135,1000095,1000129,1000136,1000137,1000098,1000075,1000131,1000035,1000089,1000027,1000138,1000139,1000092,1000140,1000035,1000027,1000141,1000095,1000142,1000143,1000103,1000098,1000075,1000144,1000035,1000027,1000145,1000095,1000142,1000146,1000147,1000148,1000098,1000075,1000144,1000035,1000089,1000027,1000149,1000150,1000092,1000151,1000035,1000027,1000152,1000095,1000153,1000154,1000098,1000075,1000155,1000035,1000027,1000156,1000095,1000153,1000157,1000098,1000075,1000155,1000035,1000089,1000027,1000158,1000159,1000160,1000161,1000162,1000163,1000027]}],"gitInfo":{"noRepoFound":true},"kind":"KIND_ADDED"}